uv.timer_stop({timer})                                         
uv.timer_stop() -> timer:stop()
Parameters:
timer: uv_timer_t userdata
Stop the timer, the callback will not be called anymore.
Returns: 0 or fail
uv.timer_again({timer})                                       
uv.timer_again()
> method form timer:again()
Parameters:
timer: uv_timer_t userdata
Stop the timer, and if it is repeating restart it using the
repeat value as the timeout. If the timer has never been
started before it raises EINVAL.
Returns: 0 or fail
uv.timer_set_repeat({timer}, {repeat})                   
uv.timer_set_repeat()
> method form timer:set_repeat(repeat)
Parameters:
timer: uv_timer_t userdata
repeat: integer
Set the repeat interval value in milliseconds. The timer will
be scheduled to run on the given interval, regardless of the
callback execution duration, and will follow normal timer
semantics in the case of a time-slice overrun.
For example, if a 50 ms repeating timer first runs for 17 ms,
it will be scheduled to run again 33 ms later. If other tasks
consume more than the 33 ms following the first timer
callback, then the callback will run as soon as possible.
Returns: Nothing.
